<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pbtd.manager.mapper.LoginInfoMapper" >
    <resultMap id="baseResultMap" type="com.pbtd.manager.domain.LoginInfo" >
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="status" property="status"/>
        <result column="realname" property="realName"/>
        <result column="level" property="level"/>
        <result column="createdate" property="createDate"/>
        <result column="contact_information" property="contactInformation"/>
        <result column="create_loginInfo" property="createLoginInfo"/>
    </resultMap>
    
    <select id="login" resultMap="baseResultMap">
    	select id,username,status,realname,level,createdate,create_loginInfo,contact_information
    	from pb_logininfo
    	where username=#{username} and password=#{password} and status=#{status}
    </select>
    
    <sql id="queryLoginInfoListSql">
    	<where>
    		<if test="username!=null">
    			and username = #{username}
    		</if>
    		<if test="level!=null">
    			and level = #{level}
    		</if>
    		<if test="status!=null">
    			and status = #{status}
    		</if>
    	</where>
    </sql>
    
    <select id="queryCount" resultType="long">
    	select count(id)
    	from pb_logininfo
    	<include refid="queryLoginInfoListSql"/>
    </select>
    <select id="queryList" resultMap="baseResultMap">
    	select id,username,status,realname,level,createdate,create_loginInfo,contact_information
    	from pb_logininfo
    	<include refid="queryLoginInfoListSql"/>
    	limit #{start},#{pageSize}
    </select>
    
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
    	insert into pb_logininfo
    	(username,password,status,realname,level,createdate,create_loginInfo,contact_information)
    	values(#{username},#{password},#{status},#{realName},#{level},#{createDate},
    	#{createLoginInfo},#{contactInformation})
    </insert>
    
    <update id="update">
    	update pb_logininfo
    	set username=#{username},realname=#{realName},contact_information=#{contactInformation}
    	where id = #{id}
    </update>
    
    <delete id="delete">
    	delete from pb_logininfo
    	where id = #{id}
    </delete>
    
    <update id="updateStatus">
    	update pb_logininfo
    	set status=#{status}
    	where id = #{id}
    </update>
    
    <select id="queryByUsername" resultMap="baseResultMap">
    	select id,username,password,status,realname,level,createdate,create_loginInfo,contact_information
    	from pb_logininfo
    	where username=#{username}
    </select>
    
    <select id="queryAdmin" resultMap="baseResultMap">
    	select id,username,status,realname,level,createdate,create_loginInfo
    	from pb_logininfo
    	where username=#{username}
    </select>
    
    <insert id="insertAdmin" useGeneratedKeys="true" keyProperty="id">
    	insert into pb_logininfo
    	(username,password,status,realname,level,createdate,create_loginInfo,contact_information)
    	values(#{username},#{password},#{status},#{realName},#{level},#{createDate},#{createLoginInfo},
    	#{contactInformation})
    </insert>
    
    <update id="resetPassword">
    	update pb_logininfo
    	set password = #{password}
    	where id = #{id}
    </update>
    
    <update id="updateSelfInfo">
    	update pb_logininfo
    	set username=#{username},realname=#{realName},contact_information=#{contactInformation}
    	where id = #{id}
    </update>
    
    <delete id="deleteBatch">
    	delete from pb_logininfo
    	where id in 
    	<foreach collection="list" index="index" item="id" open="(" separator="," close=")">
    		#{id}
    	</foreach>
    </delete>
    
    <update id="updateAdmin">
    	update pb_logininfo
    	set password = #{password}
    	where username = #{username}
    </update>
</mapper>