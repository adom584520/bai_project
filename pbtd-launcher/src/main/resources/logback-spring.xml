<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<contextName>logback</contextName>
	<property name="error.path" value="./logs/error" />
	<property name="info.path" value="./logs/info" />
	<property name="warn.path" value="./logs/warn" />
	<!-- <property name="LOG_PATH" value="logs"/> -->
	<!-- 控制台打印日志的相关配置 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<!-- 日志格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy-MM-ddHH:mm:ss} [%thread]%-5level [%class:%line] - %m %n
			</pattern>
			<charset>utf-8</charset>
		</encoder>
	</appender>
	
	<!-- ERROR日志文件保存的相关配置 -->
	<appender name="error_file"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 保存日志文件的路径 -->
		<!-- <file>${log.path}</file> -->
		<!-- 日志级别过滤器 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 过滤的级别 -->
			<level>ERROR</level>
			<!-- 匹配时的操作：接收（记录） -->
			<onMatch>ACCEPT</onMatch>
			<!-- 不匹配时的操作：拒绝（不记录） -->
			<onMismatch>DENY</onMismatch>
		</filter>
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>10MB</MaxFileSize>
		</triggeringPolicy>
		<!-- 循环政策：基于时间创建日志文件 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 日志文件名格式 -->
			<fileNamePattern>${error.path}/error-%d{yyyy-MM-dd}.log
			</fileNamePattern>
			<!-- 最大保存时间：30天 -->
			<maxHistory>30</maxHistory>
		</rollingPolicy>
		<!-- 日志格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread]%-5level [%class:%line] -
				%m %n
			</pattern>
			<charset>utf-8</charset>
		</encoder>
	</appender>
	
	<!-- WARN文件日志的相关配置 -->
	<appender name="warn_file"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 日志级别过滤器 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 过滤的级别 -->
			<level>WARN</level>
			<!-- 匹配时的操作：接收（记录） -->
			<onMatch>ACCEPT</onMatch>
			<!-- 不匹配时的操作：拒绝（不记录） -->
			<onMismatch>DENY</onMismatch>
		</filter>
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>10MB</MaxFileSize>
		</triggeringPolicy>
		<!-- 循环政策：基于时间创建日志文件 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 日志文件名格式 -->
			<fileNamePattern>${warn.path}/warn-%d{yyyy-MM-dd}.log
			</fileNamePattern>
			<!-- 最大保存时间：15天 -->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<!-- 日志格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread]%-5level [%class:%line] -
				%m %n
			</pattern>
			<charset>utf-8</charset>
		</encoder>
	</appender>
	
	<!-- INFO文件日志的相关配置 -->
	<appender name="info_file"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 日志级别过滤器 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 过滤的级别 -->
			<level>INFO</level>
			<!-- 匹配时的操作：接收（记录） -->
			<onMatch>ACCEPT</onMatch>
			<!-- 不匹配时的操作：拒绝（不记录） -->
			<onMismatch>DENY</onMismatch>
		</filter>
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>10MB</MaxFileSize>
		</triggeringPolicy>
		<!-- 循环政策：基于时间创建日志文件 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 日志文件名格式 -->
			<fileNamePattern>${info.path}/info-1%d{yyyy-MM-dd}.log
			</fileNamePattern>
			<!-- 最大保存时间：15天 -->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<!-- 日志格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread]%-5level [%class:%line] -
				%m %n
			</pattern>
			<charset>utf-8</charset>
		</encoder>
	</appender>

	<!-- mybatis日志打印 -->
	<logger name="com.mybatis" level="DEBUG" />
	<logger name="com.mybatis.common.jdbc.SimpleDataSource" level="DEBUG" />
	<logger name="com.mybatis.common.jdbc.ScriptRunner" level="DEBUG" />
	<logger name="com.mybatis.sqlmap.engine.impl.SqlMapClientDelegate"
		level="DEBUG" />

	<logger name="java.sql.Connection" level="DEBUG" />
	<logger name="java.sql.Statement" level="DEBUG" />
	<logger name="java.sql.PreparedStatement" level="DEBUG" />
	
	<!-- 打印mapper下的sql -->
	<logger name="com.pbtd.launcher.mapper" level="DEBUG"></logger>

	<!-- 基于dubug处理日志：具体控制台或者文件对日志级别的处理还要看所在appender配置的filter，如果没有配置filter，则使用root配置 -->
	<root level="INFO">
		<appender-ref ref="console" />
		<appender-ref ref="error_file" />
		<appender-ref ref="info_file" />
		<appender-ref ref="warn_file" />
	</root>
</configuration>